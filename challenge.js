let numberString =


function solveProblems(string) {
  let resultsObj = {};

  //Create results vars
  let num1OfHighest = null;
  let num2OfHighest = null;
  let evenDigits = null;
  let oddDigits = null;
  let newRun = "";
  //Make longestRun array in case there are multiple longest runs (edge case)
  let longestRun = "";
  let longestRunArray = [];

  //Assumption that there are no negative numbers
  let maxProduct = 0;

  for (let i = 0; i < string.length; i++) {
    //Only look for the highest product if there are still 8 digits left on string
    if (string.length - i >= 8) {
      let num1 = Number(string.substring(i, i + 4));
      let num2 = Number(string.substring(i + 4, i + 8));

      let product = num1 * num2;
      if (product > maxProduct) {
        maxProduct = product;
        num1OfHighest = num1;
        num2OfHighest = num2;
      }
    }

    //Count digits
    if (Number(string.substring(i, i + 1)) % 2 === 0) {
      evenDigits++;
    } else {
      oddDigits++;
    }

    //Look for the longest run
    //If number is even reset newRun otherwise add number to newRun
    //Then compare newRun and longestRun
    if (Number(string.substring(i, i + 1)) % 2 === 0) {
      newRun = "";
    } else {
      newRun += string.substring(i, i + 1);
    }
    if (newRun.length > longestRun.length) {
      longestRun = newRun;
      longestRunArray.length = 0;
      longestRunArray.push(newRun);
    } else if (newRun.length === longestRun.length) {
      longestRunArray.push(newRun);
    }
  }

  //Load results into an object to be returned
  resultsObj.maxProduct = maxProduct;
  resultsObj.num1OfHighest = num1OfHighest;
  resultsObj.num2OfHighest = num2OfHighest;
  resultsObj.evenDigits = evenDigits;
  resultsObj.oddDigits = oddDigits;
  if (longestRunArray.length === 1) {
    resultsObj.longestRun = longestRunArray[0];
  } else {
    resultsObj.longestRun = longestRunArray;
  }

  console.log(resultsObj);
  return resultsObj;
}

solveProblems(numberString);
